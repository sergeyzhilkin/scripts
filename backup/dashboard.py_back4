import boto3
from datetime import datetime, timedelta
import time

cloudwatch = boto3.client('cloudwatch', region_name='us-east-2')
s3client=boto3.client('s3', region_name='us-east-2')
lambdaclient = boto3.client('lambda', region_name='us-east-2')
logclient = boto3.client('logs', region_name='us-east-2')


complexity = 4
colors_list=["#d62728","#1f77b4","#2ca02c","#fce205","#9467bd","#bcbd22","#8c564b","#17becf","#7f7f7f","#cc7722","#ff7f0e","#1034a6","#aec7e8","#f7b6d2","#98df8a"]
#=====================================#
#             S3 BUCKETS              #
#=====================================#
sort_size_list=[]
sort_object_list=[]
bucket_color_dict={}
i=0
while  i< len(s3client.list_buckets()["Buckets"]):
 if i < len(colors_list):
  bucket_color_dict[s3client.list_buckets()["Buckets"][i]['Name']]= ', "color": "'+ colors_list[i]+'"'
 else:
  bucket_color_dict[s3client.list_buckets()["Buckets"][i]['Name']]=''
 i+=1

#get BucketSizeBytes, NumberOfObjects, PutRequests of every bucket, store to size_dict, object_dict, active_dict
seconds_in_one_day = 86400  # used for granularity
size_dict = {}
object_dict={}
active_dict={}
for bucket in s3client.list_buckets()["Buckets"]:
  bucket_name = bucket['Name']
  bucket_size = cloudwatch.get_metric_statistics(
    Namespace='AWS/S3',
    Dimensions=[
        {
            'Name': 'BucketName',
            'Value': bucket_name
        },
        {
            'Name': 'StorageType',
            'Value': 'StandardStorage'
        }
    ],
    MetricName='BucketSizeBytes',
    StartTime=datetime.now() - timedelta(days=2),
    EndTime=datetime.now(),
    Period=seconds_in_one_day,
    Statistics=[
        'Average'
    ],
    Unit='Bytes'
  )

  bucket_object = cloudwatch.get_metric_statistics(
    Namespace='AWS/S3',
    Dimensions=[
        {
            'Name': 'BucketName',
            'Value': bucket_name
        },
        {
            'Name': 'StorageType',
            'Value': 'AllStorageTypes'
        }
    ],
    MetricName='NumberOfObjects',
    StartTime=datetime.now() - timedelta(days=2),
    EndTime=datetime.now(),
    Period=seconds_in_one_day,
    Statistics=[
        'Average'
    ],
    Unit='Count'
  )

  bucket_active = cloudwatch.get_metric_statistics(
    Namespace='AWS/S3',
    Dimensions=[
        {
            'Name': 'BucketName',
            'Value': bucket_name
        },
        {
            'Name': 'FilterId',
            'Value': 'EntireBucket'
        }
    ],
    MetricName='PutRequests',
    StartTime=datetime.now() - timedelta(days=2),
    EndTime=datetime.now(),
    Period=seconds_in_one_day,
    Statistics=[
        'Sum'
    ],
    Unit='Count'
  )
  if bucket_size['Datapoints']:
   size_dict[bucket_name]= bucket_size['Datapoints'][0]['Average']
  if bucket_object['Datapoints']:
   object_dict[bucket_name]=bucket_object['Datapoints'][0]['Average']
  if bucket_active['Datapoints']:
   active_dict[bucket_name]=bucket_active['Datapoints'][0]['Sum']

#save names of buckets sorted by size to sort_size_list
listik =[]
for n in size_dict:
  listik.append(float(size_dict[n]))
listik.sort(reverse=True)
for i in range(len(size_dict)):
 for n in size_dict:
  if float(size_dict[n])==listik[i]:
   if n not in sort_size_list:
    sort_size_list.append(n)

#save names of buckets sorted by object count to sort_object_list
listik =[]
for n in object_dict:
  listik.append(float(object_dict[n]))
listik.sort(reverse=True)
for i in range(len(object_dict)):
 for n in object_dict:
  if float(object_dict[n])==listik[i]:
   if n not in sort_object_list:
    sort_object_list.append(n)

#decrease sorted lists in accordance to specified complexity
complex_sort_object_list=[]
complex_sort_size_list=[]
i=0
while i < complexity and i< len(sort_object_list):
 complex_sort_object_list.append(sort_object_list[i])
 i+=1
i=0
while i < complexity and i< len(sort_size_list):
 complex_sort_size_list.append(sort_size_list[i])
 i+=1

#save names of buckets sorted by PutRequests to object_sort_active_list and size_sort_active_list
listik =[]
size_sort_active_list=[]
object_sort_active_list=[]
for n in active_dict:
  listik.append(float(active_dict[n]))
listik.sort(reverse=True)
for i in range(len(active_dict)):
 for n in active_dict:
  if float(active_dict[n])==listik[i]:
   if n not in size_sort_active_list:
    if n not in complex_sort_size_list:
     size_sort_active_list.append(n)
  if n not in object_sort_active_list:
    if n not in complex_sort_object_list:
     object_sort_active_list.append(n)


#======================================#
#            LAMBDA FUNCTIONS          #
#======================================#
sort_invocations_list=[]

#get list of functions
invocations_dict={}
for function in lambdaclient.list_functions()['Functions']:
 function_name = function['FunctionName']
 invocations = cloudwatch.get_metric_statistics(
    Namespace='AWS/Lambda',
    Dimensions=[
        {
            'Name': 'FunctionName',
            'Value': function_name
        }
    ],
    MetricName='Invocations',
    StartTime=datetime.now() - timedelta(days=3),
    EndTime=datetime.now(),
    Period=seconds_in_one_day,
    Statistics=[
        'Sum'
    ],
    Unit='Count'
 )
 if invocations['Datapoints']:
   invocations_dict[function_name]= invocations['Datapoints'][0]['Sum']
 
#save names of functions sorted by invocations count to sort_invocations_list
listik =[]
for n in invocations_dict:
  listik.append(float(invocations_dict[n]))
listik.sort(reverse=True)
for i in range(len(invocations_dict)):
 for n in invocations_dict:
  if float(invocations_dict[n])==listik[i]:
   if n not in sort_invocations_list:
    sort_invocations_list.append(n)

function_color_dict={}
i=0
while  i< len(sort_invocations_list):
 if i < len(colors_list):
  function_color_dict[sort_invocations_list[i]]= ', "color": "'+ colors_list[i]+'"'
 else:
  function_color_dict[sort_invocations_list[i]]=''
 i+=1

#decrease sorted lists in accordance to specified complexity
complex_sort_invocations_list=[]
i=0
while i < complexity and i< len(sort_invocations_list):
 complex_sort_invocations_list.append(sort_invocations_list[i])
 i+=1

#get memory usage from cloudWatch logs (for lambdas in complex_sort_invocations_list)
time_prefix=str(datetime.now() - timedelta(days=1))
for function_name in complex_sort_invocations_list:
 mem_sum=0
 mem_num=0
 logstreams_all = logclient.describe_log_streams(
    logGroupName='/aws/lambda/'+function_name,
    logStreamNamePrefix=time_prefix[:4]+'/'+time_prefix[5:7]+'/'+time_prefix[8:10],
    orderBy= 'LogStreamName', #'LastEventTime',
    descending=True,
 )
 for logstream in logstreams_all['logStreams']:
  logstream_name=  logstream['logStreamName']
  log_event = logclient.get_log_events(
    logGroupName='/aws/lambda/'+function_name,
    logStreamName=logstream_name,
    startFromHead=True
  )
  for event in log_event['events']:
   if event['message'][:6]=='REPORT':
    mem_sum+=float(event['message'][-8:-4])
    mem_num+=1
 mem_average=mem_sum/mem_num
 print mem_average


#======================================#
#         CLOUDWATCH DASHBOARD         #
#======================================#

#    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    widget_text    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
widget_text= '{"type":"text","x":0,"y":0,"width":24,"height":1,"properties":{"markdown":"\\n# S3 Buckets (total: '+ str(len(s3client.list_buckets()['Buckets'])) +')\\n"}},{"type":"text","x":0,"y":7,"width":24,"height":1,"properties":{"markdown":"\\n# Lambda Functions (total: '+ str(len(lambdaclient.list_functions()['Functions']))+')\\n"}},'

#    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    widget_top_buckets_size    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
widget_top_buckets_size=''
buckets_size_metrics = ''
size_most_active = ''
if sort_size_list:
 i=0
 while i < len(sort_size_list) and i< complexity:
  buckets_size_metrics += '["AWS/S3","BucketSizeBytes","StorageType","StandardStorage","BucketName","' + sort_size_list[i] + '",{"period":86400' +bucket_color_dict[sort_size_list[i]]+ '}],'
  i+=1
 buckets_size_metrics=buckets_size_metrics[:-1]
 i=0
 if size_sort_active_list:
  while i < len(size_sort_active_list) and i< complexity:
   size_most_active+= ',["...","' + size_sort_active_list[i] + '",{"period":86400' + bucket_color_dict[size_sort_active_list[i]]+']}'
   i+=1
 widget_top_buckets_size = '{"type":"metric","x":0,"y":1,"width":12,"height":6,"properties":{"view":"timeSeries","stacked":false,"region":"us-east-2","metrics":['+buckets_size_metrics + size_most_active + '],"start":"-P3D","end":"P0D","legend":{"position":"right"},"title":"Top Buckets (size)"}},'

#    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    widget_top_buckets_count    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
widget_top_buckets_count=''
buckets_object_metrics = ''
object_most_active = ''
if sort_object_list:
 i=0
 while i < len(sort_object_list) and i< complexity:
  buckets_object_metrics += '["AWS/S3","NumberOfObjects","StorageType","AllStorageTypes","BucketName","' + sort_object_list[i] + '",{"period":86400'+bucket_color_dict[sort_object_list[i]]+'}],'
  i+=1
 buckets_object_metrics=buckets_object_metrics[:-1]
 i=0
 if object_sort_active_list:
  while i < len(object_sort_active_list) and i< complexity:
   object_most_active+= ',["...","' + object_sort_active_list[i] + '",{"period":86400'+bucket_color_dict[object_sort_active_list[i]]+'}]'
   i+=1
 widget_top_buckets_count = '{"type":"metric","x":12,"y":1,"width":12,"height":6,"properties":{"view":"timeSeries","stacked":false,"metrics":['+buckets_object_metrics+ object_most_active + '],"region":"us-east-2","legend":{"position":"right"},"title":"Top Buckets (count)"}},'

#    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   widget_lambda_invocations    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
widget_lambda_invocations=''
lambda_invocations_metrics=''
if sort_invocations_list:
 i=0
 while i < len(sort_invocations_list) and i< complexity:
  lambda_invocations_metrics += '["AWS/Lambda","Invocations","FunctionName","'+ sort_invocations_list[i] +'",{"period":86400,"stat":"Sum"'+function_color_dict[sort_invocations_list[i]]+'}],'
  i+=1
 lambda_invocations_metrics=lambda_invocations_metrics[:-1]
 widget_lambda_invocations= '{"type":"metric","x":0,"y":8,"width":12,"height":6,"properties":{"metrics":['+lambda_invocations_metrics+'],"view":"timeSeries","stacked":false,"region":"us-east-2","legend":{"position":"right"}}},'

#    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   widget_lambda_errors    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
widget_lambda_errors=''
lambda_errors_metrics=''
if sort_invocations_list:
 i=0
 while i < len(sort_invocations_list) and i< complexity:
  lambda_errors_metrics += '["AWS/Lambda","Errors","FunctionName","'+ sort_invocations_list[i] +'",{"period":86400,"stat":"Sum"' +function_color_dict[sort_invocations_list[i]]+ '}],'
  i+=1
 lambda_errors_metrics=lambda_errors_metrics[:-1]
 widget_lambda_errors= '{"type":"metric","x":12,"y":8,"width":12,"height":6,"properties":{"metrics":['+lambda_errors_metrics+'],"view":"timeSeries","stacked":false,"region":"us-east-2","legend":{"position":"right"}}},'

#    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   widget_lambda_throttles    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
widget_lambda_throttles=''
lambda_throttles_metrics=''
if sort_invocations_list:
 i=0
 while i < len(sort_invocations_list) and i< complexity:
  lambda_throttles_metrics += '["AWS/Lambda","Throttles","FunctionName","'+ sort_invocations_list[i] +'",{"period":86400,"stat":"Sum"'+function_color_dict[sort_invocations_list[i]]+'}],'
  i+=1
 lambda_throttles_metrics=lambda_throttles_metrics[:-1]
 widget_lambda_throttles= '{"type":"metric","x":0,"y":14,"width":12,"height":6,"properties":{"metrics":['+lambda_throttles_metrics+'],"view":"timeSeries","stacked":false,"region":"us-east-2","legend":{"position":"right"}}},'

#   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   widget_lambda_ConcurrentExecutions    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
widget_lambda_ConcurrentExecutions=''
lambda_ConcurrentExecutions_metrics=''
if sort_invocations_list:
 i=0
 while i < len(sort_invocations_list) and i< complexity:
  lambda_ConcurrentExecutions_metrics += '["AWS/Lambda","ConcurrentExecutions","FunctionName","'+ sort_invocations_list[i] +'",{"period":86400,"stat":"Sum"'+function_color_dict[sort_invocations_list[i]]+'}],'
  i+=1
 lambda_ConcurrentExecutions_metrics=lambda_ConcurrentExecutions_metrics[:-1]
 widget_lambda_ConcurrentExecutions= '{"type":"metric","x":12,"y":14,"width":12,"height":6,"properties":{"metrics":['+lambda_ConcurrentExecutions_metrics+'],"view":"timeSeries","stacked":false,"region":"us-east-2","legend":{"position":"right"}}},'

#   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   widget_lambda_duration_average    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
widget_lambda_duration_average=''
lambda_duration_average_metrics=''
if sort_invocations_list:
 i=0
 while i < len(sort_invocations_list) and i< complexity:
  lambda_duration_average_metrics += '["AWS/Lambda","Duration","FunctionName","'+ sort_invocations_list[i] +'",{"period":86400,"stat":"Average"'+function_color_dict[sort_invocations_list[i]]+'}],'
  i+=1
 lambda_duration_average_metrics=lambda_duration_average_metrics[:-1]
 widget_lambda_duration_average= '{"type":"metric","x":0,"y":20,"width":12,"height":6,"properties":{"metrics":['+lambda_duration_average_metrics+'],"view":"timeSeries","stacked":false,"region":"us-east-2","legend":{"position":"right"},"title":"Duration (average)"}},'

#   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   widget_lambda_duration_max    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
widget_lambda_duration_max=''
lambda_duration_max_metrics=''
if sort_invocations_list:
 i=0
 while i < len(sort_invocations_list) and i< complexity:
  lambda_duration_max_metrics += '["AWS/Lambda","Duration","FunctionName","'+ sort_invocations_list[i] +'",{"period":86400,"stat":"Maximum"'+function_color_dict[sort_invocations_list[i]]+'}],'
  i+=1
 lambda_duration_max_metrics=lambda_duration_max_metrics[:-1]
 widget_lambda_duration_max= '{"type":"metric","x":12,"y":20,"width":12,"height":6,"properties":{"metrics":['+lambda_duration_max_metrics+'],"view":"timeSeries","stacked":false,"region":"us-east-2","legend":{"position":"right"},"title":"Duration (max)"}},'

#put DevOps-Dashboard to CloudWatch
DashboardBodyString= '{"widgets":['+widget_top_buckets_size+widget_top_buckets_count+widget_lambda_invocations+widget_text+widget_lambda_errors+widget_lambda_throttles+widget_lambda_ConcurrentExecutions+widget_lambda_duration_average+widget_lambda_duration_max+']}'
if DashboardBodyString[-3]==",":
 DashboardBodyString=DashboardBodyString[:-3]+']}'

response = cloudwatch.put_dashboard(
   DashboardName = 'DevOps-Dashboard',
   DashboardBody = DashboardBodyString
)


